name: Build and publish Docker image

on:
  push:
    branches:
      - main
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  docker:
    name: Build and publish image
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    env:
      IMAGE_NAME: my-socks5-proxy
      DOCKERHUB_USERNAME: ${{ secrets.DOCKERHUB_USERNAME }}
      DOCKERHUB_TOKEN: ${{ secrets.DOCKERHUB_TOKEN }}
      GHCR_PAT: ${{ secrets.GHCR_PAT }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up QEMU
        uses: docker/setup-qemu-action@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        if: env.DOCKERHUB_USERNAME != '' && env.DOCKERHUB_TOKEN != ''
        uses: docker/login-action@v3
        with:
          registry: docker.io
          username: ${{ env.DOCKERHUB_USERNAME }}
          password: ${{ env.DOCKERHUB_TOKEN }}

      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ toLower(github.repository_owner) }}
          password: ${{ secrets.GHCR_PAT != '' && secrets.GHCR_PAT || github.token }}

      - name: Prepare image names
        id: images
        run: |
          owner_lower="${GITHUB_REPOSITORY_OWNER,,}"
          echo "owner_lower=$owner_lower" >> "$GITHUB_OUTPUT"
          images="ghcr.io/${owner_lower}/${IMAGE_NAME}"
          echo "ghcr_image=ghcr.io/${owner_lower}/${IMAGE_NAME}" >> "$GITHUB_OUTPUT"
          if [ -n "${DOCKERHUB_USERNAME}" ] && [ -n "${DOCKERHUB_TOKEN}" ]; then
            echo "dockerhub_image=docker.io/${DOCKERHUB_USERNAME}/${IMAGE_NAME}" >> "$GITHUB_OUTPUT"
            images="$images\ndocker.io/${DOCKERHUB_USERNAME}/${IMAGE_NAME}"
          fi
          {
            echo "images<<'EOF'"
            echo "$images"
            echo "EOF"
          } >> "$GITHUB_OUTPUT"
        env:
          IMAGE_NAME: ${{ env.IMAGE_NAME }}
          DOCKERHUB_USERNAME: ${{ env.DOCKERHUB_USERNAME }}
          DOCKERHUB_TOKEN: ${{ env.DOCKERHUB_TOKEN }}

      - name: Determine tag strategy
        id: tags
        run: |
          latest="false"
          if [[ "${GITHUB_REF}" == "refs/heads/main" ]]; then
            latest="true"
          elif [[ "${GITHUB_REF}" == refs/tags/v* ]]; then
            latest="true"
          fi
          echo "latest=${latest}" >> "$GITHUB_OUTPUT"

      - name: Docker metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ steps.images.outputs.images }}
          tags: |
            type=raw,value=latest,enable=${{ steps.tags.outputs.latest }}
            type=ref,event=tag
            type=sha,format=short
          labels: |
            org.opencontainers.image.title=my-socks5-proxy
            org.opencontainers.image.description=Lightweight SOCKS5 proxy built on Dante
            org.opencontainers.image.url=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.source=${{ github.server_url }}/${{ github.repository }}
            org.opencontainers.image.revision=${{ github.sha }}
            org.opencontainers.image.licenses=UNLICENSED

      - name: Build and push image
        uses: docker/build-push-action@v5
        with:
          context: .
          file: ./Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
